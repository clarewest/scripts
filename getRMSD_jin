#!/usr/bin/env python

import sys
from Bio.PDB.PDBParser import PDBParser
from Bio.SVDSuperimposer import SVDSuperimposer
import numpy as np

def getcoords(structure, chain):
    # Return a dictionary that contains the coordinates of a particular chain.
    # Only get backbone atoms.
    # key: residue number, insertion, atom name
    # value: coord
    return dict([ ((a.parent.id[1], a.parent.id[2], a.name),a.coord) for a in structure.get_atoms() if a.parent.parent.id == chain and a.name in ['N','CA','C','O'] ])

def getequal(atoms1, atoms2):
    # Given two sets of atoms, get atoms that are found in both sets.
    # this is done by looking at which atoms (identified as, e.g. (31, ' ', 'CA')) are present in both coordinate sets.
    equalkeys = set(atoms1.keys()) & set(atoms2.keys())
    return np.array([ atoms1[k] for k in equalkeys ]), np.array([ atoms2[k] for k in equalkeys ]) 

def superimpose(native,model,chain):
    """
    Given a structure (native and model), superimpose for a given chain.
    Return the superimposer
    """
    native_coords = getcoords(native, chain)
    model_coords  = getcoords(model, chain)
    equal_native, equal_model = getequal(native_coords, model_coords)
    
    si = SVDSuperimposer()
    si.set(equal_native, equal_model)
    si.run()
    return si


if __name__ == '__main__':
    if len(sys.argv) < 4:
        print 'Get the backbone RMSD between two proteins for a particular chain'
        print 'getRMSD [native structure] [model structure] [chain ID]'
        sys.exit()

    p = PDBParser()
    native_structure = p.get_structure(sys.argv[1], sys.argv[1])
    model_structure  = p.get_structure(sys.argv[2], sys.argv[2])

    si = superimpose(native_structure, model_structure, sys.argv[3])

    print 'RMSD: %.3f' % si.get_rms()
